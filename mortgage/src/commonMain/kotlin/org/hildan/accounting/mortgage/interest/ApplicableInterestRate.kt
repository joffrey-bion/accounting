package org.hildan.accounting.mortgage.interest

import org.hildan.accounting.money.Amount
import org.hildan.accounting.money.Fraction
import org.hildan.accounting.mortgage.*

/**
 * An interest rate that is applicable at a given moment in time.
 * It doesn't depend on the current date or LTV ratio, because it represents the value after this has been considered.
 */
data class ApplicableInterestRate(
    /**
     * The interest percentage that should be applied to an amount of borrowed money over a full year.
     */
    val annualRate: Fraction,
    /**
     * The day count convention to calculate the prorated rate over partial periods (not full years).
     */
    val dayCountConvention: DayCountConvention,
)

/**
 * Calculates the total interest generated by a variable amount of money across a [period].
 *
 * The balance starts at [initialBalance], and is reduced at each of the given [balanceReductions], which defines
 * sub-periods of equal balance.
 *
 * The interest is calculated on each new balance in each sub-period, and then summed up for all periods.
 */
internal fun ApplicableInterestRate.interestByPartsOn(
    initialBalance: Amount,
    balanceReductions: List<Payment>,
    period: PaymentPeriod,
): Amount {
    var from = period.start
    var balance = initialBalance
    var interest = Amount.ZERO
    balanceReductions
        .filter { it.date in period }
        .sortedBy { it.date }
        .forEach { reduction ->
            val dayCountFactor = dayCountConvention.dayCountFactor(start = from, endExclusive = reduction.date)
            interest += balance * annualRate * dayCountFactor
            balance -= reduction.amount
            from = reduction.date
        }
    val dayCountFactor = dayCountConvention.dayCountFactor(start = from, endExclusive = period.endExclusive)
    interest += balance * annualRate * dayCountFactor
    return interest
}
