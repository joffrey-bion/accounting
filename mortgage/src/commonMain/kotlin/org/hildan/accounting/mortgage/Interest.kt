package org.hildan.accounting.mortgage

import org.hildan.accounting.money.Amount
import org.hildan.accounting.money.Fraction

/**
 * Calculates the total interest generated by a variable amount of money across a [period].
 *
 * The balance starts at [initialBalance], and is reduced at each of the given [balanceReductions], which defines
 * sub-periods of equal balance.
 *
 * The interest is calculated on each new balance in each sub-period with the given [annualInterestRate].
 * The fraction of the annual rate for each sub-period is calculated based on the given [dayCountConvention].
 */
internal fun interestByParts(
    initialBalance: Amount,
    balanceReductions: List<Payment>,
    period: PaymentPeriod,
    annualInterestRate: Fraction,
    dayCountConvention: DayCountConvention,
): Amount {
    var from = period.start
    var balance = initialBalance
    var interest = Amount.ZERO
    balanceReductions.forEach { reduction ->
        val dayCountFactor = dayCountConvention.dayCountFactor(start = from, endExclusive = reduction.date)
        interest += balance * annualInterestRate * dayCountFactor
        balance -= reduction.amount
        from = reduction.date
    }
    val dayCountFactor = dayCountConvention.dayCountFactor(start = from, endExclusive = period.endExclusive)
    interest += balance * annualInterestRate * dayCountFactor
    return interest
}
